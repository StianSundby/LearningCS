//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LearningCS.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LearningCS.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The weeks will be added when needed..
        /// </summary>
        internal static string Program_ChooseWeek_ {
            get {
                return ResourceManager.GetString("Program_ChooseWeek_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to That&apos;s it. Press any key to return.
        /// </summary>
        internal static string WeekOne_ReturnToPreviousMenu_ {
            get {
                return ResourceManager.GetString("WeekOne_ReturnToPreviousMenu_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment 2 - String Interpolation.There was also an assignment about debugging arguments, but I can&apos;t showcase that here.
        ///.
        /// </summary>
        internal static string WeekOne_Task2_ {
            get {
                return ResourceManager.GetString("WeekOne_Task2_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment 3 - Loops.
        ///This assignment was all about understanding the different types of loops, which include: 
        ///While, Do-While, Foreach and For
        ///
        ///There isn&apos;t anything to show here, the code just printed out a word 10 times.
        ///Which was done four diffrent times with four different types of loops.
        ///.
        /// </summary>
        internal static string WeekOne_Task3_Intro {
            get {
                return ResourceManager.GetString("WeekOne_Task3_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment 4 - Letter counter.
        ///Counts the number of each letter entered.
        ///It left-aligns the text.
        ///Also shows how much of the total percentage each letter used. If that makes any sense...
        ///.
        /// </summary>
        internal static string WeekOne_Task4_Intro {
            get {
                return ResourceManager.GetString("WeekOne_Task4_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment 5 - Return value.
        ///This assignment consists of two tasks, where I had to write two methods.
        ///The first method should return the sum of two numbers.
        ///The second method should write out that it doesnt return anything to the console.
        ///.
        /// </summary>
        internal static string WeekOne_Task5_Intro {
            get {
                return ResourceManager.GetString("WeekOne_Task5_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment 6 - Password generator.
        ///This assignment was about making random password generator based on userinput.
        ///
        ///
        ///.
        /// </summary>
        internal static string WeekOne_Task6_Intro {
            get {
                return ResourceManager.GetString("WeekOne_Task6_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PasswordGenerator 
        ///  Options:
        ///  - l = lower case letter
        ///  - L = upper case letter
        ///  - d = digit
        ///  - s = special character (!#¤%&amp;/(){}[]
        ///
        ///Example: 14 lLssdd
        ///  - Min. 1 lower case
        ///  - Min. 1 upper case
        ///  - Min. 2 special characters
        ///  - Min. 2 digits
        ///
        ///Enter your password parameters. If you can&apos;t think of any, just enter the ones in the example....
        /// </summary>
        internal static string WeekOne_Task6_PasswordRequirements {
            get {
                return ResourceManager.GetString("WeekOne_Task6_PasswordRequirements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task 1:
        ///We were tasked with making a program that reads and handles data from a text file.
        ///And with this data we were to make a word-riddle generator. All of the riddles are inNorwegian..
        /// </summary>
        internal static string WeekThree_Task1_Intro {
            get {
                return ResourceManager.GetString("WeekThree_Task1_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task 2:
        ///We were tasked with making a program that utilizes classes and constructors.
        ///The class was to have an object variable &apos;Name&apos; that was to be called from theClass and printed to the console. We were also to print out a line 10 times.
        ///Press any key to continue...
        ///.
        /// </summary>
        internal static string WeekThree_Task2_Intro {
            get {
                return ResourceManager.GetString("WeekThree_Task2_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to That&apos;s it. Press any key to return.
        /// </summary>
        internal static string WeekTwo_ReturnToPreviousMenu_ {
            get {
                return ResourceManager.GetString("WeekTwo_ReturnToPreviousMenu_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment 7 - Debugging.
        ///			The code provided for this assignment is the same as in WeekOne, Task 4.
        ///			It was about teaching us debugging in Visual Studio. 
        ///			Breakpoints, step-into, step-over and step-out. 
        ///			There isn&apos;t alot to show here. But feel free to: 
        ///
        ///			Type in some letters and the code will count the amount of each one....
        /// </summary>
        internal static string WeekTwo_Task1_ {
            get {
                return ResourceManager.GetString("WeekTwo_Task1_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task 1:
        ///We were first tasked with copy pasting some code and figuring out what it does.
        ///After that we were to add functionality to it, which are the following:
        ///     Change it so that it handles both lowercase and capital letters.
        ///     Show the count in %, not just a whole number
        ///     Adjust the text so it prints to the right side of the console..
        /// </summary>
        internal static string WeekTwo_Task1_Intro {
            get {
                return ResourceManager.GetString("WeekTwo_Task1_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment 8 - Puzzles.
        ///We were given 4 puzzles that we had to solve.
        ///The first three was about printing out some &apos;#&apos; to the console in a given pattern.
        ///Pattern one being the easiest and three being the hardest.
        ///The rules were as follows:
        ///I can only write Console.Write(&apos;#&apos;), Console.Write(&apos; &apos;) and Console.WriteLine.
        ///
        ///The last puzzle was to count the number of words in the users input.
        ///In addition to that it should count the amount of characters in the longest word.
        ///The amount of vowels and any othe [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WeekTwo_Task2_Intro {
            get {
                return ResourceManager.GetString("WeekTwo_Task2_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press any key to get the next shape...
        ///.
        /// </summary>
        internal static string WeekTwo_Task2_Next {
            get {
                return ResourceManager.GetString("WeekTwo_Task2_Next", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press any key to view the next puzzle....
        /// </summary>
        internal static string WeekTwo_Task2_NextPuzzle {
            get {
                return ResourceManager.GetString("WeekTwo_Task2_NextPuzzle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment 9 - Arrays.
        ///We were given 5 puzzles that we had to solve.
        ///Each one was to be solved using arrays in one way or another.
        ///Press any key to view the first puzzle...
        ///.
        /// </summary>
        internal static string WeekTwo_Task3_Intro {
            get {
                return ResourceManager.GetString("WeekTwo_Task3_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Press any key to view the next puzzle....
        /// </summary>
        internal static string WeekTwo_Task3_Next {
            get {
                return ResourceManager.GetString("WeekTwo_Task3_Next", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The problem:
        ///Write a program that is given an array of integers and determines the mode,
        ///which is the number that appears most frequently in the array.
        ///.
        /// </summary>
        internal static string WeekTwo_Task3_ProblemFive_Intro {
            get {
                return ResourceManager.GetString("WeekTwo_Task3_ProblemFive_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The problem:
        ///To make the ciphertext problem even more challenging, have your program randomly
        ///generate the cipher array instead of a hard - coded const array.
        ///Effectively, this means placing a random character in each element of the
        ///array, but remember that you can’t substitute a letter for itself.So the first
        ///element can’t be A, and you can’t use the same letter for two substitutions—
        ///that is, if the first element is S, no other element can be S.
        ///.
        /// </summary>
        internal static string WeekTwo_Task3_ProblemFour_Intro {
            get {
                return ResourceManager.GetString("WeekTwo_Task3_ProblemFour_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The problem:
        ///Write a bool function that is passed an array and the number of elements in
        ///that array and determines whether the data in the array is sorted.This should
        ///require only one pass!
        ///.
        /// </summary>
        internal static string WeekTwo_Task3_ProblemOne_Intro {
            get {
                return ResourceManager.GetString("WeekTwo_Task3_ProblemOne_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The problem:
        ///Have the previous program convert the ciphertext back to the plaintext to
        ///verify the encoding and decoding.
        ///.
        /// </summary>
        internal static string WeekTwo_Task3_ProblemThree_Intro {
            get {
                return ResourceManager.GetString("WeekTwo_Task3_ProblemThree_Intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The problem:
        ///Here’s a variation on the array of const values. Write a program for creating a
        ///substitution cipher problem.In a substitution cipher problem, all messages
        ///are made of uppercase letters and punctuation.The original message is called
        ///the plaintext, and you create the ciphertext by substituting each letter with
        ///another letter(for example, each C could become an X).For this problem,
        ///hard-code a const array of 26 char elements for the cipher, and have your
        ///program read a plaintext message and [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WeekTwo_Task3_ProblemTwo_Intro {
            get {
                return ResourceManager.GetString("WeekTwo_Task3_ProblemTwo_Intro", resourceCulture);
            }
        }
    }
}
